
  def checkSuit(num) do
    # Takes a number and returns its suit
    a = num >= 1 and num <= 13
    b = num >= 14 and num <= 26
    c = num >= 27 and num <= 39
    d = num >= 40 and num <= 52

    ans =
      cond do
        a -> 'C'
        b -> 'D'
        c -> 'H'
        d -> 'S'
      end

    ans
  end

  def getHighestRank(hand, remove) do
    lst = handToNum(hand)
    lst = lst -- remove

    high =
      cond do
        1 in lst -> 1
        13 in lst -> 13
        12 in lst -> 12
        11 in lst -> 11
        10 in lst -> 10
        9 in lst -> 9
        8 in lst -> 8
        7 in lst -> 7
        6 in lst -> 6
        5 in lst -> 5
        4 in lst -> 4
        3 in lst -> 3
        2 in lst -> 2
      end

    high
  end

  def checkNum(num) do
    # Takes any number and returns its value with the range 1-13
    a = num == 1 or num == 14 or num == 27 or num == 40
    b = num == 2 or num == 15 or num == 28 or num == 41
    c = num == 3 or num == 16 or num == 29 or num == 42
    d = num == 4 or num == 17 or num == 30 or num == 43
    e = num == 5 or num == 18 or num == 31 or num == 44
    f = num == 6 or num == 19 or num == 32 or num == 45
    g = num == 7 or num == 20 or num == 33 or num == 46
    h = num == 8 or num == 21 or num == 34 or num == 47
    i = num == 9 or num == 22 or num == 35 or num == 48
    j = num == 10 or num == 23 or num == 36 or num == 49
    k = num == 11 or num == 24 or num == 37 or num == 50
    l = num == 12 or num == 25 or num == 38 or num == 51
    m = num == 13 or num == 26 or num == 39 or num == 52

    ans =
      cond do
        a -> 1
        b -> 2
        c -> 3
        d -> 4
        e -> 5
        f -> 6
        g -> 7
        h -> 8
        i -> 9
        j -> 10
        k -> 11
        l -> 12
        m -> 13
      end

    ans
  end

  def recurHighRanks([], highest), do: highest |> inspect(charlists: :as_lists)
  def recurHighRanks(choices, highest) do
    a = hd(choices)
    high = getHighestRank([getHighestRank(highest, []), getHighestRank(a, [])], [])

    ans =
      cond do
        high in handToNum(a) -> a
        high in handToNum(highest) -> highest
      end

    recurHighRanks(choices -- [a], ans)
  end

  def equalPairs([], lst), do: lst
  def equalPairs(choices, lst) do
    a = hd(choices)

    if Enum.count(Enum.uniq(a)) == 1 do
      equalPairs(choices -- [a], lst ++ [a])
    else
      equalPairs(choices -- [a], lst)
    end
  end

  def handToSuit(hand) do
    suits = for n <- hand, do: checkSuit(n)
    suits
    # returns a list of just the hands suits
  end

  def handToNum(hand) do
    num = for n <- hand, do: checkNum(n)
    num
    # returns a list of just the hands values (1-13)
  end

  def finalHand(hand) do
    setup = for n <- hand, do: "#{to_string(checkNum(n))}#{checkSuit(n)}"
    setup |> inspect(charlists: :as_lists)
  end

  def sameSuit(hand) do
    lst = handToSuit(hand)
    set = MapSet.new(lst)
    len = String.length(Enum.join(set, ""))
    len == 1
    # takes in hand and returns true if values in the hand have the same suit
  end

  def getDuplicates([],_element,lst), do: lst--[nil]|> inspect(charlists: :as_lists)
  def getDuplicates(hand,element,lst) do
    if element != hd hand do
      getDuplicates(hand -- [hd hand],element,lst)      
    else
      getDuplicates(hand -- [hd hand],element,lst ++ [hd hand])     
    end 
  end

  # Check hand without Ace in the middle of it
  def checkSequenceV1(hand) do
    # hand = Enum.sort(hand)
    lst = handToNum(hand)
    temp = Enum.chunk_every(lst, 2, 1, :discard)
    check = for x <- temp, do: hd(tl(x)) - hd(x)
    set = MapSet.new(check)
    len = String.length(Enum.join(set, ""))
    len == 1 and 1 in set
  end

  # Check hand without Ace in the middle of it
  def checkSequenceV2(hand) do
    # hand = Enum.sort(hand)
    lst = handToNum(hand)
    temp = Enum.chunk_every(lst, 2, 1, :discard)
    check = for x <- temp, do: hd(tl(x)) - hd(x)
    checkTwo = for x <- temp, do: hd(x) - hd(tl(x))
    set = MapSet.new(check)
    set2 = MapSet.new(checkTwo)
    len = String.length(Enum.join(set, ""))
    len2 = String.length(Enum.join(set2, ""))
    cond1 = len == 1 and 1 in set
    cond2 = len2 == 1 and 1 in set2

    ans =
      cond do
        cond1 == true -> true
        cond2 == true -> true
        cond1 == false -> false
        cond2 == false -> false
      end

    ans
  end